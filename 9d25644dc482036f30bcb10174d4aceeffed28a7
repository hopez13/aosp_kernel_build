{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1547a97b_a4529224",
        "filename": "kleaf/build_cleaner.py",
        "patchSetId": 6
      },
      "lineNbr": 132,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2024-08-09T22:56:17Z",
      "side": 1,
      "message": "Technically this is `list[str] | None`\n\nDo you need the default value, though? Consider just making it a required `list[str]` argument by deleting the default values.",
      "range": {
        "startLine": 132,
        "startChar": 60,
        "endLine": 132,
        "endChar": 69
      },
      "fixSuggestions": [
        {
          "fixId": "c1e9d294_8eeb0abd",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "kleaf/build_cleaner.py",
              "range": {
                "startLine": 132,
                "startChar": 0,
                "endLine": 133,
                "endChar": 0
              },
              "replacement": "    def __init__(self, cleaner: \"BuildCleaner\", bazel_args: list[str]):\n"
            },
            {
              "path": "kleaf/build_cleaner.py",
              "range": {
                "startLine": 135,
                "startChar": 0,
                "endLine": 136,
                "endChar": 0
              },
              "replacement": "        self.bazel_args \u003d bazel_args\n"
            },
            {
              "path": "kleaf/build_cleaner.py",
              "range": {
                "startLine": 230,
                "startChar": 0,
                "endLine": 231,
                "endChar": 0
              },
              "replacement": "    def __init__(self, bazel_args: list[str], *init_args, **init_kwargs):\n"
            }
          ]
        }
      ],
      "revId": "9d25644dc482036f30bcb10174d4aceeffed28a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45c15608_eb41563c",
        "filename": "kleaf/build_cleaner.py",
        "patchSetId": 6
      },
      "lineNbr": 132,
      "author": {
        "id": 1931347
      },
      "writtenOn": "2024-08-12T07:15:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1547a97b_a4529224",
      "range": {
        "startLine": 132,
        "startChar": 60,
        "endLine": 132,
        "endChar": 69
      },
      "revId": "9d25644dc482036f30bcb10174d4aceeffed28a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "097e846e_25eba8f6",
        "filename": "kleaf/build_cleaner.py",
        "patchSetId": 6
      },
      "lineNbr": 135,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2024-08-09T22:56:17Z",
      "side": 1,
      "message": "nit: `bazel_args or []`",
      "range": {
        "startLine": 135,
        "startChar": 26,
        "endLine": 135,
        "endChar": 58
      },
      "fixSuggestions": [
        {
          "fixId": "7f9ccfcb_f290c01e",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "kleaf/build_cleaner.py",
              "range": {
                "startLine": 135,
                "startChar": 0,
                "endLine": 136,
                "endChar": 0
              },
              "replacement": "        self.bazel_args \u003d bazel_args or []\n"
            }
          ]
        }
      ],
      "revId": "9d25644dc482036f30bcb10174d4aceeffed28a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b53b0063_4060d880",
        "filename": "kleaf/build_cleaner.py",
        "patchSetId": 6
      },
      "lineNbr": 135,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2024-08-09T22:57:41Z",
      "side": 1,
      "message": "(if you still keep the default argument)",
      "parentUuid": "097e846e_25eba8f6",
      "range": {
        "startLine": 135,
        "startChar": 26,
        "endLine": 135,
        "endChar": 58
      },
      "revId": "9d25644dc482036f30bcb10174d4aceeffed28a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce914322_842f61a7",
        "filename": "kleaf/build_cleaner.py",
        "patchSetId": 6
      },
      "lineNbr": 135,
      "author": {
        "id": 1931347
      },
      "writtenOn": "2024-08-12T07:15:24Z",
      "side": 1,
      "message": "Done with removing the default argument.",
      "parentUuid": "b53b0063_4060d880",
      "range": {
        "startLine": 135,
        "startChar": 26,
        "endLine": 135,
        "endChar": 58
      },
      "revId": "9d25644dc482036f30bcb10174d4aceeffed28a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "370410eb_f1f56b02",
        "filename": "kleaf/build_cleaner.py",
        "patchSetId": 6
      },
      "lineNbr": 167,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2024-08-09T22:56:17Z",
      "side": 1,
      "message": "nit: consider creating a `pattern \u003d re.compile()` (you might need a ^ and $ for a full line match) then `pattern.finditer()` on `query_out`, then you don\u0027t have to splitlines()\n\n```suggestion\n        pattern \u003d re.compile(r\u0027^(.*) \\(.*\\)$\u0027)\n        for match in pattern.finditer(query_out):\n            kernel_module_target_strs.append(match.group(1))\n```",
      "range": {
        "startLine": 165,
        "startChar": 35,
        "endLine": 167,
        "endChar": 54
      },
      "revId": "9d25644dc482036f30bcb10174d4aceeffed28a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f193585_5440911d",
        "filename": "kleaf/build_cleaner.py",
        "patchSetId": 6
      },
      "lineNbr": 167,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2024-08-09T22:59:26Z",
      "side": 1,
      "message": "The original code also didn\u0027t check for `if match`, so it could crash if it sees recognized lines. finditer won\u0027t have this issue; if there are no more matches, the loop stops.",
      "parentUuid": "370410eb_f1f56b02",
      "range": {
        "startLine": 165,
        "startChar": 35,
        "endLine": 167,
        "endChar": 54
      },
      "revId": "9d25644dc482036f30bcb10174d4aceeffed28a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "70ac4888_b04ea8b1",
        "filename": "kleaf/build_cleaner.py",
        "patchSetId": 6
      },
      "lineNbr": 167,
      "author": {
        "id": 1931347
      },
      "writtenOn": "2024-08-12T07:15:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0f193585_5440911d",
      "range": {
        "startLine": 165,
        "startChar": 35,
        "endLine": 167,
        "endChar": 54
      },
      "revId": "9d25644dc482036f30bcb10174d4aceeffed28a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4fbbd30_5aff37ac",
        "filename": "kleaf/build_cleaner.py",
        "patchSetId": 6
      },
      "lineNbr": 230,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2024-08-09T22:56:17Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 230,
        "startChar": 35,
        "endLine": 230,
        "endChar": 44
      },
      "revId": "9d25644dc482036f30bcb10174d4aceeffed28a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "39f20daa_b6d5e87e",
        "filename": "kleaf/build_cleaner.py",
        "patchSetId": 6
      },
      "lineNbr": 230,
      "author": {
        "id": 1931347
      },
      "writtenOn": "2024-08-12T07:15:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e4fbbd30_5aff37ac",
      "range": {
        "startLine": 230,
        "startChar": 35,
        "endLine": 230,
        "endChar": 44
      },
      "revId": "9d25644dc482036f30bcb10174d4aceeffed28a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f072e38_d5a53648",
        "filename": "kleaf/build_cleaner.py",
        "patchSetId": 6
      },
      "lineNbr": 250,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2024-08-09T22:56:17Z",
      "side": 1,
      "message": "nit: remaining",
      "range": {
        "startLine": 250,
        "startChar": 20,
        "endLine": 250,
        "endChar": 24
      },
      "fixSuggestions": [
        {
          "fixId": "1415bbc1_91eea1c3",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "kleaf/build_cleaner.py",
              "range": {
                "startLine": 250,
                "startChar": 0,
                "endLine": 251,
                "endChar": 0
              },
              "replacement": "  bazel_args        rest unknown arguments will be passed to the bazel commands\n\"\"\")\n"
            }
          ]
        }
      ],
      "revId": "9d25644dc482036f30bcb10174d4aceeffed28a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd79803f_c24dede3",
        "filename": "kleaf/build_cleaner.py",
        "patchSetId": 6
      },
      "lineNbr": 250,
      "author": {
        "id": 1931347
      },
      "writtenOn": "2024-08-12T07:15:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8f072e38_d5a53648",
      "range": {
        "startLine": 250,
        "startChar": 20,
        "endLine": 250,
        "endChar": 24
      },
      "revId": "9d25644dc482036f30bcb10174d4aceeffed28a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "447c35e1_a7f52baa",
        "filename": "kleaf/build_cleaner.py",
        "patchSetId": 6
      },
      "lineNbr": 264,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2024-08-09T22:56:17Z",
      "side": 1,
      "message": "nit: removeprefix()",
      "range": {
        "startLine": 264,
        "startChar": 40,
        "endLine": 264,
        "endChar": 57
      },
      "revId": "9d25644dc482036f30bcb10174d4aceeffed28a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66c36494_4b7ae846",
        "filename": "kleaf/build_cleaner.py",
        "patchSetId": 6
      },
      "lineNbr": 264,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2024-08-09T22:56:17Z",
      "side": 1,
      "message": "This seems brittle; is there any better way to do this?",
      "range": {
        "startLine": 264,
        "startChar": 4,
        "endLine": 264,
        "endChar": 90
      },
      "fixSuggestions": [
        {
          "fixId": "84afbd27_4965481c",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "kleaf/build_cleaner.py",
              "range": {
                "startLine": 264,
                "startChar": 0,
                "endLine": 265,
                "endChar": 0
              },
              "replacement": "    parser.usage \u003d parser.format_usage() + \u0027 [bazel_args ...]\\n\u0027\n"
            }
          ]
        }
      ],
      "revId": "9d25644dc482036f30bcb10174d4aceeffed28a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7e76bbb_59bc973c",
        "filename": "kleaf/build_cleaner.py",
        "patchSetId": 6
      },
      "lineNbr": 264,
      "author": {
        "id": 1931347
      },
      "writtenOn": "2024-08-12T07:15:24Z",
      "side": 1,
      "message": "I can only find two other ways. I prefer neither of them:\n\n1. Use `argparse.REMAINDER` to parse remaining args\n  \u003d\u003e It has a bug and has been removed from python official document, so I prefer not to use it.\n  \n2. Assign the usage in the initialization of the class: `argparse.ArgumentParser(..., usage\u003d...)`\n  \u003d\u003e Need to manually edit the usage when adding/modifying other arguments. It\u0027s easy to be unsynced.",
      "parentUuid": "66c36494_4b7ae846",
      "range": {
        "startLine": 264,
        "startChar": 4,
        "endLine": 264,
        "endChar": 90
      },
      "revId": "9d25644dc482036f30bcb10174d4aceeffed28a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c382d725_ca086c91",
        "filename": "kleaf/build_cleaner.py",
        "patchSetId": 6
      },
      "lineNbr": 264,
      "author": {
        "id": 1931347
      },
      "writtenOn": "2024-08-12T07:15:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "447c35e1_a7f52baa",
      "range": {
        "startLine": 264,
        "startChar": 40,
        "endLine": 264,
        "endChar": 57
      },
      "revId": "9d25644dc482036f30bcb10174d4aceeffed28a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "32faf7d4_38f79968",
        "filename": "kleaf/build_cleaner.py",
        "patchSetId": 6
      },
      "lineNbr": 264,
      "author": {
        "id": 1121838
      },
      "writtenOn": "2024-08-12T19:54:35Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "d7e76bbb_59bc973c",
      "range": {
        "startLine": 264,
        "startChar": 4,
        "endLine": 264,
        "endChar": 90
      },
      "revId": "9d25644dc482036f30bcb10174d4aceeffed28a7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}